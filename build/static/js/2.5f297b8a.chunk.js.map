{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","Object","from","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","deepMerge","target","source","isPrimitive","targetValue","sourceValue","search","output","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","isWeb","copy","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","getFieldArrayParentName","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","lastIndexOf","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","fieldArrayValue","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","React.useMemo","prop","FormContext","React.createContext","displayName"],"mappings":"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","file":"static/js/2.5f297b8a.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          if (isUndefined(field.ref.focus())) {\n            break;\n          }\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (Array.isArray(options) && options.length) {\n      compact(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !compact(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb: boolean,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const fieldArrayValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : cloneObject(defaultValues, isWeb),\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (!error && resolverRef.current) {\n              const parentNodeName = name.substring(\n                0,\n                name.lastIndexOf('.') > name.lastIndexOf('[')\n                  ? name.lastIndexOf('.')\n                  : name.lastIndexOf('['),\n              );\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length ||\n            !fieldArrayValue.length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}